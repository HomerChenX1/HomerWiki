created: 20200601081604915
modified: 20200601110931947
tags: SQLite Python
title: SQLiteForPython
type: text/vnd.tiddlywiki

!! ''參考資料'':
* [[sqlite3--- SQLite數據庫DB-API 2.0接口模塊|https://docs.python.org/zh-cn/3/library/sqlite3.html]]
* [[使用Python構建SQLite輕量級資料庫|https://kknews.cc/tech/3mb3j8.amp]]
* [[SQLite 教程|https://m.runoob.com/sqlite/sqlite-python.html]]
* [[Python使用sqlite|https://blog.bombox.org/2016-06-22/python-sqlite/]]
* [[SQLite Tutorial|https://www.sqlitetutorial.net/sqlite-create-table/]]
* [[Python and sqlite3 - importing and exporting databases|https://stackoverflow.com/questions/4719159/python-and-sqlite3-importing-and-exporting-databases]]
* [[Importing a CSV file into a sqlite3 database table using Python|https://stackoverflow.com/questions/2887878/importing-a-csv-file-into-a-sqlite3-database-table-using-python]]
* [[合併多個sqlite3資料庫使用python3|https://weitinglin.com/2017/04/18/%E5%90%88%E4%BD%B5%E5%A4%9A%E5%80%8Bsqlite3%E8%B3%87%E6%96%99%E5%BA%AB%E4%BD%BF%E7%94%A8python3/]]

!! ''SQLite 資料型態''
SQLite原生只支持5種類型：TEXT，INTEGER，REAL，BLOB和NULL

!!! ''//可以將以下Python類型發送到SQLite而不會出現任何問題//''

|! Python 類型 |! SQLite 類型 |
| None | NULL |
| int | INTEGER |
| float | REAL |
| str | TEXT |
| bytes | BLOB |
| datetime.date | TEXT, ISO 日期 |
| datetime.datetime | REAL, ISO timestamp |

!!! ''//SQLite類型默認轉換為Python類型的方式//''

|! SQLite 類型 |! Python 類型 |
| NULL | None |
| INTEGER | int |
| REAL | float |
| TEXT | 取決於text_factory,默認為 str |
| BLOB | bytes |

!! ''SQLite Schema design''
* one database has many tables
* one table has many rows/records
** one table has one ''primary key''
** one table has many foreign keys
** one table has many index
* one row/records has many columns/fields
** use ''row_factory'' to mapping columns/fields in Python
* columns/fields is basic units
* ''Schema can design by ER Diagram''

!! ''基本使用順序為''
# 用 connect() 函數建立跟資料庫檔案聯繫的 Connection 物件。
# 由 Connection 物件的 cursor() 方法建立 Cursor 物件。
# 利用 Cursor 物件的 execute()/executemany() 方法進行資料庫操作。
# 利用 Connection 物件的 commit() 方法做資料庫檔案更新。
# 利用 Connection 物件的 close() 方法做關閉跟資料庫檔案的聯繫。

* ''must assume SQLite is single thread, need to do synchronize ''
* 使用Cursor對象執行insert，update，delete語句時，執行結果由rowcount()返回影響的行數，就可以拿到執行結果。

* 使用Cursor對象執行select語句時，通過fetchall()可以拿到結果集。結果集是一個list，每個元素都是一個tuple，對應一行記錄。

* 如果SQL語句帶有參數，那麼需要把參數按照位置傳遞給execute()方法，有幾個?佔位符就必須對應幾個參數
** `cursor.execute('select * from user where name=? and pwd=?', ('abc', 'password'))`

!!! //connect database//
```python
# 連接資料庫文件：
conn = sqlite3.connect（'example.db'）
# conn = sqlite3.connect(":memory:")
# 建立 cursor
cur = conn.cursor（）
＃開始執行SQL語句：

＃關閉資料庫連接，養成良好習慣：
conn.close（）
```

!!! //create tables//
```python
# SQL : CREATE TABLE name (field1 type, field2 type, ...)

# 連接資料庫文件：
conn = sqlite3.connect（'example.db'）
# 建立 cursor
cur = conn.cursor（）
＃開始執行SQL語句：
cur.execute("CREATE TABLE contacts (date text, name text, number text)")
conn.commit()

＃關閉資料庫連接，養成良好習慣：
conn.close（）
```

```python
import sqlite3

sqlite_address = '/Users/caobo/Desktop/短歌行/DuanGeXing/dgx/dgx.db'

def conn_sqlite(sql_query):
    try:
        conn = sqlite3.connect(sqlite_address)
        c = conn.cursor()
        cursor = c.execute(sql_query)
        result = cursor.fetchall()
        #fetchall 是列出所有的数据
        #fetchone 是只列出一行数据
        return result
    except Exception as e:
        print(e)
    finally:
        conn.commit()
        conn.close()
```

!!! //insert rows//
```python
# SQL : INSERT INTO name VALUES (value1, value2, ...)

# 連接資料庫文件：
conn = sqlite3.connect（'example.db'）
# 建立 cursor
cur = conn.cursor（）
＃開始執行SQL語句：
cur.execute("INSERT INTO contacts VALUES ('2018-03-11','王小寶','222')")
cur.execute("INSERT INTO contacts VALUES ('2018-03-12','吳有明','321')")
cur.execute("INSERT INTO contacts VALUES ('2018-03-15','白采君','320')")
conn.commit()

# Larger example that inserts many records at a time
purchases = [('2006-03-28', 'BUY', 'IBM', 1000, 45.00),
             ('2006-04-05', 'BUY', 'MSFT', 1000, 72.00),
             ('2006-04-06', 'SELL', 'IBM', 500, 53.00),
            ]
cur.executemany('INSERT INTO stocks VALUES (?,?,?,?,?)', purchases)
conn.commit()

＃關閉資料庫連接，養成良好習慣：
conn.close()
```

!!! //update rows//
```python
# SQL :  UPDATE usrs SET email= ? WHERE d = ?  

# 連接資料庫文件：
conn = sqlite3.connect（'example.db'）
# 建立 cursor
cur = conn.cursor（）
＃開始執行SQL語句：
cur.execute("UPDATE usrs SET email= ? WHERE d = ?", (email, user_id))
conn.commit()

＃關閉資料庫連接，養成良好習慣：
conn.close（）
```

!!! //delete rows//
```python
# SQL :  _dete =  DELETE FROM users WHERE id= ? 

# 連接資料庫文件：
conn = sqlite3.connect（'example.db'）
# 建立 cursor
cur = conn.cursor（）
＃開始執行SQL語句：
cur.execute("DELETE FROM users WHERE id= ?",  (user_id,))
conn.commit()

＃關閉資料庫連接，養成良好習慣：
conn.close（）
```

!!! //query rows//
```python
# SQL : SELECT field FROM name
# SQL : SELECT field FROM name ORDER BY field
# SQL : SELECT field FROM name WHERE condition
# SQL : SELECT field FROM name BETWEEN field1 AND field2
# SQL : SELECT AVG(field) FROM name
# SQL : SELECT COUNT(field) FROM name
# SQL : SELECT MAX(field) FROM name
# SQL : SELECT MIN(field) FROM name
# SQL : SELECT SUM(field) FROM name

# 連接資料庫文件：
conn = sqlite3.connect（'example.db'）
# 建立 cursor
cur = conn.cursor（）
＃開始執行SQL語句：

t = ('RHAT',)
cur.execute('SELECT * FROM stocks WHERE symbol=?', t)
print(cur.fetchone())

for row in cur.execute('SELECT * FROM stocks ORDER BY price'):
        print(row)

# commit is not necessary

＃關閉資料庫連接，養成良好習慣：
conn.close（）
```
