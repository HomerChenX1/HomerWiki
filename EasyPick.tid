created: 20190708010827328
modified: 20200306091224631
tags: Projects [[Servers' setup]]
title: EasyPick
type: text/vnd.tiddlywiki

!! Android Request for Requirement
* action in school side or parent side
* action in normal mode or engineering mode
* use production database or debug database
* model : View `ViewModel `Controller and Model
** 0900123666  pwd:123456
* 欣聯測試帳號我們改成
** 0900123777  pwd:123456
*** s000001_c000000_O100000003
** 0900123888  pwd:123456
*** s000001_c000000_O100000001
*Exceptions:
** Checked: EOFException
** Unchecked:  ~IllegalArgumentException
* `parentLocationObj.arrivalInfo.willArriveTimeStamp == -1  parent cancelled`
* [[Programming|Programming]]
* AndroidProgramTemplate

!! modify Auth
* delete auth schools/parents
* modify idAndName
* build new auth


!! Android Merge for checkout
* test item is closed : inTest
* code length < 30 lines
* code check
** onCreate, onCreatView, onActivityCreated <-> onDestroy
** onStart <-> onStop
** onResume <-> onPause

!!! Divider
```xml
<View
    android:layout_width="match_parent"
    android:layout_height="1dp"
    android:layout_marginLeft="16dp"
    android:layout_marginRight="16dp"
    android:background="@color/gray_background_light"
    android:layout_marginTop="@dimen/card_view_inner_margin_top" />
```

!!! ListView
```xml
<ListView
    android:id="@+id/lvTravelMode"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_marginBottom="@dimen/card_view_inner_margin_top"
    android:divider="@color/gray_background_light"
    android:dividerHeight="1dp"
    tools:listitem="@layout/location_report_list_item"
    tools:listheader="@layout/list_view_selection_header"
/>
```

!!! ~TextView
```xml
<TextView
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:textSize="@dimen/weather_text_size_L"
android:textStyle="bold"
android:autoSizeTextType="uniform"
android:maxLines="1"
android:text="" />
```

!!! Round Button
```xml
<Button
            android:id="@+id/btnNextStep"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_below="@id/divider1"
            android:layout_marginRight="15dp"
            android:layout_marginLeft="15dp"
            
            android:background="@drawable/button_background"
            android:backgroundTint="@color/dark_blue"
            
            android:textAllCaps="false"
            android:textSize="20sp"
            android:textStyle="bold"
            android:textColor="@color/white"
            android:text="@string/cancel" />
```

!!! Switch
```xml
<RelativeLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="@dimen/row_height"
    android:background="@drawable/round_shape_medium_stroke"
    android:backgroundTint="@color/white"
    android:layout_marginStart="@dimen/card_view_inner_margin_top_Lp"
    android:layout_marginEnd="@dimen/card_view_inner_margin_top_Lp"
    android:layout_marginTop="@dimen/row_margin"
    android:layout_marginBottom="@dimen/row_margin" >

    <TextView
        android:id="@+id/tvClassNameName"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentStart="true"
        android:layout_centerVertical="true"
        android:paddingStart="@dimen/card_view_margin_left_S"
        android:maxLines="1"
        android:textSize="@dimen/weather_text_size_SS"
        android:text="班級A" />

    <Switch
        android:id="@+id/swClassEnable"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentEnd="true"
        android:layout_centerVertical="true"
        android:layout_marginStart="@dimen/card_view_margin_left_S"
        android:layout_marginEnd="@dimen/card_view_margin_left_S"
        android:paddingTop="@dimen/card_view_inner_margin_top_half"
        android:paddingBottom="@dimen/card_view_inner_margin_top_half"
        android:thumb="@drawable/thumb_selector"
        android:track="@drawable/track_selector" />
</RelativeLayout>
```

!!! Edit Text
```xml
<EditText
            android:id="@+id/etSpeakerName"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            
            android:background="@drawable/round_shape_large_stroke"
            android:maxLines="1"
            android:maxLength="10"
            android:inputType="text"
            android:imeOptions="actionDone"
            />
```

!!! `EasyPickFragment` 漢堡選單
```java
public class PersonnelRollFragment extends EasyPickFragment {
    @Override
    protected int getToolbarTitle() {
        return R.string.personel_title;
    }

    @Override
    protected int getHomeMipmapId() {
        // return -1
        return R.mipmap.but_menu;
    }

    @Override
    protected int getToolbarMenu() {
        return R.menu.menu_personel_roll;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.menuRoll:  // unique id in all menus
                Log.d(TAG, "clicked!");
                return true;
        }
        return false;
    }
}
```

!!! ~MyAlertDialog : need to changed to abstract

```java
public class MyAlertDialog {
    protected Context context;
    protected boolean needResize = false;
    protected final View rootView;
    private AlertDialog alertDialog;

    public AlertDialog getAlertDialog() { return alertDialog; }

    public MyAlertDialog(@NonNull Context context, @LayoutRes int layoutId, boolean needResize) {
        this.context = context;
        this.needResize = needResize;
        this.rootView = LayoutInflater.from(context).inflate(layoutId, null);
    }

    protected void findViews() { }

    protected void bindViews() { }

    public void showDialog(){
        AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(context);
        dialogBuilder.setView(rootView);
        alertDialog = dialogBuilder.create();
        alertDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
        // alertDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        alertDialog.setCanceledOnTouchOutside(false);
        alertDialog.show();
    }

    public void dismissDialog(){
        if (alertDialog != null){
            alertDialog.dismiss();
            alertDialog = null;
        }
    }

    protected void resizeDialog() {
        Window window = getAlertDialog().getWindow();
        View decorView = window.getDecorView();
        int paddingTop = decorView.getPaddingTop();
        int paddingBottom = decorView.getPaddingBottom();
        int paddingLeft = decorView.getPaddingLeft();
        int paddingRight = decorView.getPaddingRight();

        decorView.measure(
                View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED),
                View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED));
        int height = decorView.getMeasuredHeight() + paddingTop + paddingBottom;
        int width = decorView.getMeasuredWidth() + paddingLeft + paddingRight;

        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        Display display = wm.getDefaultDisplay();
        Point point = new Point();
        display.getSize(point); // x is width, y is height
        // use height directly
        int adjustWidth = (int) (point.x * 0.9);
        width = adjustWidth>width?adjustWidth:width;
        window.setLayout(width, height);
    }

    public void doDialog(){
        findViews();
        bindViews();
        showDialog();
        if (needResize) { resizeDialog(); }
    }
}

```

!!! ~MyBaseAdapter : need to add supporting UI class

```java
public abstract class HandlerController2<T extends Fragment, UI, D, IOK> extends Handler {
    protected String TAG = getClass().getSimpleName();
    private WeakReference<FragmentActivity> mActivity;
    private WeakReference<T> mFragment;
    private WeakReference<UI> uiClass;
    private int mType = 0;
    private Map<IOK, Handler> ioHanderMap;
    private D dao;

    public HandlerController2(@NonNull FragmentActivity activity){
        this(activity, null, null);
    }

    public HandlerController2(@NonNull FragmentActivity activity, T fragment){
        this(activity, fragment, null);
    }

    public HandlerController2(@NonNull FragmentActivity activity, T fragment, UI aClass) {
        ioHanderMap = new HashMap<>();
        mActivity = new WeakReference<>(activity);
        if (fragment!=null) {
            mFragment = new WeakReference<>(fragment);
            mType = 1;
        }
        if (aClass!=null) {
            uiClass= new WeakReference<>(aClass);
            mType = 2;
        }
    }

    public void onDestroy(){
        if (ioHanderMap !=null) {
            if (ioHanderMap.size()!=0) {
                ioHanderDestroy();
            }
            ioHanderMap = null;
        }
        
        if (dao!=null){
            daoDestroy();
            dao = null;
        }
        removeCallbacksAndMessages(null);
    }
    
    public FragmentActivity getActivity(){ return mActivity.get(); }

    public T getFragment() { return mFragment==null? null: mFragment.get(); }

    public UI getUiClass() { return uiClass==null? null: uiClass.get(); }

    public Context getContext() { return getActivity(); }

    @Override
    public void handleMessage(Message msg) {
        super.handleMessage(msg);
        switch(mType){
            case 0:
                if (getActivity()==null) { return; }
                break;
            case 1:
                if (getActivity()==null || getFragment()==null) { return; }
                break;
            case 2:
                if (getActivity()==null || getFragment()==null || getUiClass()==null) { return; }
                break;
            default:
                return;
        }
        handleMsgInternal(msg);
    }

    // used for override
    protected abstract void handleMsgInternal(@NonNull Message msg);
    
    @Nullable Handler getIoHanderMap(@NonNull IOK key){ return ioHanderMap.get(key); }
    void putIoHanderMap(@NonNull IOK key, @NonNull Handler handler){ ioHanderMap.put(key, handler); }
    protected abstract void ioHanderDestroy();

    @Nullable D getDao() { return dao; }
    void setDao(@NonNull D dao) {  this.dao = dao; }
    protected abstract void daoDestroy();
    
}
```