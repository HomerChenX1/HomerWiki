created: 20190628071552497
modified: 20200306095810321
tags: MaterialDesign AndroidUI
title: ListView
type: text/vnd.tiddlywiki

!! 特徵 :
* `ListView` 本身 scrollable, 不需要 `ScrollView`
* AndroidChips
* [[android listview item style?|https://stackoverflow.com/questions/17981507/android-listview-item-style]]
* Item checked
** `lvTimeList.setItemChecked()`
* Scroll:
** lvTimeList.smoothScrollToPosition(); 
** lvTimeList.post( ()->smoothScrollToPosition();)

!! 參考資料 :
* [[ListView 進階用法 BaseAdapter|http://learnexp.tw/%E3%80%90android%E3%80%91listview-%E9%80%B2%E9%9A%8E%E7%94%A8%E6%B3%95-baseadapter/]]
* [[實作 Android ListView|https://julianchu.net/2015/09/26-implement-listview.html]]
* [[清單|https://wcc723.gitbooks.io/google_design_translate/components-lists.html]]
* [[ListView優化和列表首尾使用|https://mp.weixin.qq.com/s?__biz=MzI1MTAyNzM5Ng==&mid=2649949446&idx=1&sn=436ada2bc3fbd8e757c961f7b0ca5995&chksm=f1feefadc68966bbd66c786f82ad39709724dec75b3fbfca4d667b8fd5a98d193358e84b1008#rd]]
* [[可折疊列表ExpandableListView多級選擇|https://mp.weixin.qq.com/s?__biz=MzI1MTAyNzM5Ng==&mid=2649949616&idx=1&sn=d3ce2871b9035bd004f17a37a63dc990&chksm=f1feef1bc689660daecabf7a5ead0e743ea23ea3c2bb808af910ecacb79c774ba460b428c08f#rd]]
* [[實作 Android ListView|https://julianchu.net/2015/09/26-implement-listview.html]]
* [[【Android】CheckedTextView - 用於 ListView 的 CheckBox|http://oldgrayduck.blogspot.com/2012/10/androidcheckedtextview-listview-checkbox.html]]
* [[ListView 增加頁頭、頁尾|https://programnoteforlearning.blogspot.com/2017/05/listview.html]]
* [[Android ListView padding for content without moving ListView height|https://src-bin.com/en/q/784654]]
* [[ListView中含有Button時setOnclickListener應寫在Adapter的什麼地方|https://blog.csdn.net/yangzl2008/article/details/7863938]]

!!! ''XML code'' :
```xml
<ListView
            android:id="@+id/lvTravelMode"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/card_view_margin_top"
            android:layout_marginBottom="@dimen/card_view_margin_top"

            android:divider="@color/colorAccent"
            android:dividerHeight="1px"
            />

```

!!! ''Adapter Java Code''
```java
public abstract class MyBaseAdapter2<K, VH extends MyBaseAdapter.MyViewHolder> extends BaseAdapter {
    protected K[] mData;
    private LayoutInflater inflater;
    private Context context;
    private int itemResId;

    public MyBaseAdapter2(@NonNull Context context, @NonNull List<K> mData, @LayoutRes int itemResId) {
        this(context, (mData.size()>0? (K[]) mData.toArray(): null), itemResId);
    }

    public MyBaseAdapter2(@NonNull Context context, @Nullable K[] mData, @LayoutRes int itemResId) {
        this.mData = mData;
        this.inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        this.context = context;
        this.itemResId = itemResId;
    }

    public @NonNull Context getContext() { return context; }

    @Override
    public int getCount() {
        return mData.length;
    }

    @Override
    public Object getItem(int position) {
        return mData[position];
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    @Override
    public View getView(int position, @Nullable View convertView, @Nullable ViewGroup parent) {
        VH holder;

        if (convertView == null) {
            // add a new view
            holder = newViewHolder();
            convertView = inflater.inflate(itemResId, null);
            findViews(holder, convertView);
            convertView.setTag(holder);
        } else {
            holder = (VH) convertView.getTag();
        }
        bindViews(holder, position);
        return convertView;
    }

    // holder.mode = convertView.findViewById(R.id.tvTravelModeMethod);
    protected abstract void findViews(@NonNull VH holder, @NonNull View convertView);

    // holder.img.setImageResource(mData.get(position).resid);
    protected abstract void bindViews(@NonNull VH holder, int position);

    // return new VH(convertView);
    @NonNull
    protected abstract VH newViewHolder();

    public void refresh(@NonNull List<K> mData) {
        this.mData = mData.size()>0? (K[]) mData.toArray(): null;
        notifyDataSetChanged();
    }

    public static void setListViewHeight(ListView listView, Integer minHeight, Integer maxHeigh){
        int totalHeight = 0;

        ListAdapter mAdapter = listView.getAdapter();
        if (mAdapter == null) { return; }
        int maxCount = mAdapter.getCount();
        if (maxCount == 0) { return; }

        for (int i = 0; i < maxCount; i++) {
            View mView = mAdapter.getView(i, null, listView);

            mView.measure(
                    View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED),
                    View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED));
            totalHeight += mView.getMeasuredHeight();
        }

        totalHeight += (listView.getDividerHeight() * (mAdapter.getCount() - 1));
        if (minHeight!=null && totalHeight < minHeight){ totalHeight = minHeight; }
        if (maxHeigh!=null && totalHeight > maxHeigh) { totalHeight = maxHeigh; }

        ViewGroup.LayoutParams params = listView.getLayoutParams();
        params.height = totalHeight;
        listView.setLayoutParams(params);
        listView.requestLayout();
    }

    public class MyViewHolder {
        private View itemView;

        public MyViewHolder() { }

        public @Nullable View getItemView() {
            return itemView;
        }

        public void setItemView(@NonNull View itemView) {
            this.itemView = itemView;
        }
    }
}

```

!!! ''`MainActivity` Java Code'':
```java
        TravelModeAdapter travelModeAdapter = new TravelModeAdapter(itemArray, this);
        lvTravelMode.setAdapter(travelModeAdapter);
        lvTravelMode.setOnItemClickListener(onClickListView);       //指定事件 Method

private AdapterView.OnItemClickListener onClickListView = new AdapterView.OnItemClickListener(){
        @Override
        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
            TravelModeAdapter.ViewHolder holder = (TravelModeAdapter.ViewHolder) view.getTag();
            holder.img.setImageResource(itemArray.get(position).resIdSel);
            new Handler().postDelayed(new Runnable() {
                @Override
                public void run() {
                    dismiss();
                }
            }, 200);
        }
    };
```

!!! ''Item checked'':
```java
@Override
public View getView(int position, View convertView, ViewGroup parent) {
   ((ListView)parent).setItemChecked(position, true);
}
```

!!! ''Offset Scroll''
```xml
                    int k = lvTimeList.getFirstVisiblePosition()+0;  // 1
                    if (j<k) {
                        // j = j<=0? 0: j-1;  // -1
                        // Log.d(TAG, "debug");
                    } else {
                        j = j+2;  // 1
                        if (j>= timeListAdapter.getCount()) {
                            j = timeListAdapter.getCount() -1;
                        }
                    }
                    lvTimeList.smoothScrollToPosition(j);
```