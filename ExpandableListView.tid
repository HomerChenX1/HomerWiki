created: 20191029024442911
modified: 20200306104238229
tags: AndroidUI
title: ExpandableListView
type: text/vnd.tiddlywiki

!! 特徵 :

!!! ''Scroll''
* do not use setSelectedChild. There is mysterious bugs, use smoothScrollToPosition
** need convert groupPosition, childPosition to flatPosition
* if necessary, put in `elvStudentsList.post()`

!! 參考資料 :
* [[ExpandableListView(可折叠列表)的基本使用|https://www.runoob.com/w3cnote/android-tutorial-expandablelistview.html|https://www.runoob.com/w3cnote/android-tutorial-expandablelistview.html]]
* [[ExpandableListView (展開式選單)|http://jk127780.blogspot.com/2015/01/android-expandablelistview.html]]
* [[ExpandableListView的使用|https://www.jianshu.com/p/10360a8a52d4]]
* [[Android ExpandableListView展開列表控制元件使用例項|https://codertw.com/android-%E9%96%8B%E7%99%BC/354604/]]
* [[Adding the search functionality in expandable listview|https://bhandaryinandroid.wordpress.com/2015/03/13/adding-the-search-functionality-in-expandable-listview/]]
* [[smoothScrollToPosition in ExpandableListView|https://stackoverflow.com/questions/8603946/smoothscrolltoposition-in-expandablelistview]]
* [[Expandable Listview inside scrollview|https://thedeveloperworldisyours.com/android/expandable-listview-inside-scrollview/]]

```xml
<ExpandableListView
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:id="@+id/elvStudentsList"
    android:layout_marginBottom="@dimen/card_view_inner_margin_top_L"
    android:groupIndicator="@null"
    tools:listitem="@layout/student_list_group"
    android:layout_weight="1"
/>
```

```java
public abstract class MyExpandableListView<GROUP, ITEM, GVH, IVH, EK> extends BaseExpandableListAdapter {
    private GROUP[] gData; // for effective Java, should be changed to Array, but blocking in new issue
    private ITEM[][] iData; // for effective Java, should be changed to Array, but blocking in new issue
    private @LayoutRes final int groupLayoutId;
    private @LayoutRes final int itemLayoutId;
    private final Map<EK, Boolean> expandedObj = new HashMap<>();

    public MyExpandableListView(@NonNull List<GROUP> gData, @NonNull List<List<ITEM>> iData,
                                @LayoutRes int groupLayoutId, @LayoutRes int itemLayoutId) {
        this.gData = gData.size()>0? (GROUP[]) gData.toArray(): null;
        cvtIData(iData);
        this.groupLayoutId = groupLayoutId;
        this.itemLayoutId = itemLayoutId;
        setupExpandedObj(this.gData, expandedObj);
    }

    private void cvtIData(@NonNull List<List<ITEM>> iData){
        // need check again
        int len = iData.size();
        Object[] result = new Object[len];
        for (int i=0; i<len; i++){
            result[i] = iData.get(i).toArray();
        }
        this.iData = (ITEM[][])result;
    }

    boolean hasExpanded(@NonNull EK key){ return expandedObj.get(key); }
    void putExapnded(@NonNull EK key, boolean val) { expandedObj.put(key, val); }

    @Override
    public int getGroupCount() {
        return gData.length;
    }

    @Override
    public int getChildrenCount(int groupPosition) {
        return iData[groupPosition].length;
    }

    @Override
    public GROUP getGroup(int groupPosition) {
        return gData[groupPosition];
    }

    @Override
    public ITEM getChild(int groupPosition, int childPosition) {
        return iData[groupPosition][childPosition];
    }

    @Override
    public long getGroupId(int groupPosition) {
        return groupPosition;
    }

    @Override
    public long getChildId(int groupPosition, int childPosition) {
        return childPosition;
    }

    @Override
    public boolean hasStableIds() {
        return false;
    }

    @Override
    public View getGroupView(int groupPosition, boolean isExpanded, @Nullable View convertView, @NonNull ViewGroup parent) {
        GVH groupViewHolder;
        GROUP groupData = getGroup(groupPosition);

        if(convertView == null){
            convertView = LayoutInflater.from(parent.getContext()).inflate(
                    groupLayoutId, parent, false);
            groupViewHolder = newGroupViewHolder();
            findViewsGroup(groupViewHolder, convertView);
            convertView.setTag(groupViewHolder);
        }else{
            groupViewHolder = (GVH) convertView.getTag();
        }
        bindViewGroup(groupViewHolder, groupPosition, isExpanded);
        return convertView;
    }

    @Override
    public View getChildView(int groupPosition, int childPosition, boolean isLastChild, @Nullable View convertView, @NonNull ViewGroup parent) {
        IVH itemViewHolder;
        ITEM itemData = getChild(groupPosition, childPosition);
        GROUP groupData = getGroup(groupPosition);

        if(convertView == null) {
            // no convertView and itemHolder
            convertView = LayoutInflater.from(parent.getContext()).inflate(
                    itemLayoutId, parent, false);
            itemViewHolder = newItemViewHolder();
            findViewsItem(itemViewHolder, convertView);
            convertView.setTag(itemViewHolder);
        } else {
            itemViewHolder = (IVH) convertView.getTag();
        }
        bindViewItem(itemViewHolder, childPosition, isLastChild);
        return convertView;
    }

//    @Override
//    public boolean isChildSelectable(int groupPosition, int childPosition) {
//        // need to modify to your necessary
//        return true;
//    }

    public void refresh(@NonNull List<GROUP> gData, @NonNull List<List<ITEM>> iData) {
        this.gData = gData.size()>0? (GROUP[]) gData.toArray(): null;
        cvtIData(iData);
        notifyDataSetInvalidated();
    }

    public static void setListViewHeight(ExpandableListView listView, int group, Integer minHeight, Integer maxHeigh) {
        ExpandableListAdapter listAdapter = listView.getExpandableListAdapter();
        int totalHeight = 0;
        int desiredWidth = View.MeasureSpec.makeMeasureSpec(listView.getWidth(),
                View.MeasureSpec.EXACTLY);
        for (int i = 0; i < listAdapter.getGroupCount(); i++) {
            View groupItem = listAdapter.getGroupView(i, false, null, listView);
            groupItem.measure(desiredWidth, View.MeasureSpec.UNSPECIFIED);

            totalHeight += groupItem.getMeasuredHeight();

            if (((listView.isGroupExpanded(i)) && (i != group))
                    || ((!listView.isGroupExpanded(i)) && (i == group))) {
                for (int j = 0; j < listAdapter.getChildrenCount(i); j++) {
                    View listItem = listAdapter.getChildView(i, j, false, null,
                            listView);
                    listItem.measure(desiredWidth, View.MeasureSpec.UNSPECIFIED);

                    totalHeight += listItem.getMeasuredHeight();

                }
            }
        }

        ViewGroup.LayoutParams params = listView.getLayoutParams();
        int height = totalHeight
                + (listView.getDividerHeight() * (listAdapter.getGroupCount() - 1));
        if (minHeight!=null && height < minHeight){ height = minHeight; }
        if (maxHeigh!=null && height > maxHeigh) { height = maxHeigh; }
        params.height = height;
        listView.setLayoutParams(params);
        listView.requestLayout();
    }

    // listView.smoothScrollToPosition(listView, getScrollIndex(cursorGroupPos,cursorchildPos));
    public static int getScrollIndex(ExpandableListView listView, int groupPosition, int childPosition) {
        int count = 0;
        ExpandableListAdapter listAdapter = listView.getExpandableListAdapter();

        for (int g = 0; g < groupPosition; g++){
            if (listView.isGroupExpanded(g)) {
                count += listAdapter.getChildrenCount(g) + 1;
            } else {
                count += 1;
            }
        }
        count += childPosition +1;
        return count;
    }

    protected abstract void setupExpandedObj(GROUP[] gData, Map<EK, Boolean> expandedObj);

    protected abstract GVH newGroupViewHolder();

    protected abstract void findViewsGroup(@NonNull GVH holder, @NonNull View convertView);

    // holder.img.setImageResource(mData.get(position).resid);
    protected abstract void bindViewGroup(@NonNull GVH holder, int groupPosition, boolean isExpanded);

    protected abstract IVH newItemViewHolder();

    protected abstract void findViewsItem(@NonNull IVH holder, @NonNull View convertView);

    // holder.img.setImageResource(mData.get(position).resid);
    protected abstract void bindViewItem(@NonNull IVH holder, int childPosition, boolean isLastChild);
}
```