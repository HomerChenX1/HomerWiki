created: 20190901124050494
modified: 20190902052447906
tags: Software Python
title: PythonSyntax
type: text/vnd.tiddlywiki

!! 參考資料:
* [[Python 3.1 快速導覽 - 關鍵字|https://pydoing.blogspot.com/2011/01/python-keyword.html?m=1]]
* [[Python 3.1 快速導覽 - 運算子|https://pydoing.blogspot.com/2011/01/python-operator.html?m=1]]
* PythonNamespace

!!! ''Load/Store''
```plain
    class,def,lambda
    from import,import as
    global,nonlocal
    set/tuple () (:)
    list [] [:]
    dictionary {} 
    class.method
    buffers 
    \ 程式連接到下一行
    # 替程式註解
    def function_name():
    class ClassName(BaseN0, BaseN1 ):
    staticmethod() == @ staticmethod
    classmethod() == @ classmethod
    property() == @property
    getattr(),setattr(),delattr(),hasattr()
    open()
```
    
!!! ''Sequence''
```plain
    del
    with
    print,format(),repr()
    +,-,*,/, %,**,//
    &,|,^,~,>>,<<
    =, note:id() usually change
    +=,-=,*=,/=, %=,**=,//= note:id() not change
    &=,|=,^=,~=,>>=,<<=
    abs(),divmod(),pow(),max(),min(),round()
    all(),any(), sum(),reversed(),sorted(),
    hash(),
    input(),raw_input(),
    int(),tuple(),float(),list(),set(),dict(),long(),
    complex(), frozenset(),bytearray(),bool()
    hex(),oct(),str(),bin(),
    unichr(),unicode(),chr(),ord(),
    dir(),id(),vars()==__dict__
    ?eval(),?super(),?object()
    len(),
    locals(),globals(),
```

!!! ''Branch''
```plain
    False,True,None
    is,in,and,or,not,
    <,>,>=,<=,==,!=
    if-else
    if-elseif-else,
    return,pass,
    x=y if condition else z
    isinstance(),basestring(),type()
    issubclass(),callable(),
    cmp(),hasattr(),file()
```
    
!!! ''Loop''
```plain
    while -else :
    for-in -else :
    yield
    continue,break
    xx=[y for x in […] if condition else z]
    enumerate(),zip(),
    ?iter(),next(),slice()
    range(),xrange(),slice()
```

!!! ''Exception''
```plain
    try-except, try-finally
    ?try-except-finally
    assert errno errcode[]
    raise class
    raise exception (arg1, arg2, )
    simulate goto
        ExitLoop="out_loop"
        try:
            raise ExitLoop
        except ExitLoop:
            pass 
```

!!! ''Functional language''
```plain
    filter(),map(),reduce()
```